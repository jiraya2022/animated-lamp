import datetime

from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..utils import Utilities
from ..screenshotbot import ScreenShotBot
from ..config import Config


@ScreenShotBot.on_message(
    filters.private
    & ((filters.text & ~filters.edited) | filters.media)
    & filters.incoming
)
async def _(c, m):

    if m.media:
        if not Utilities.is_valid_file(m):
            return
    else:
        if not Utilities.is_url(m.text):
            return

    snt = await m.reply_text(
        "H…™ ·¥õ ú·¥á Ä·¥á, P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ·¥° ú…™ ü·¥á I'·¥ç …¢·¥á·¥õ·¥õ…™…¥…¢ ·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢  Ä·¥á·¥Ä·¥Ö è ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss  è·¥è·¥ú Ä  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ",
        quote=True,
    )

    if m.media:
        file_link = Utilities.generate_stream_link(m)
    else:
        file_link = m.text

    duration = await Utilities.get_duration(file_link)
    if isinstance(duration, str):
        await snt.edit_text("üòü S·¥è Ä Ä è! I ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥è·¥ò·¥á…¥ ·¥õ ú·¥á “ì…™ ü·¥á.")
        log = await m.forward(Config.LOG_CHANNEL)
        await log.reply_text(duration, True)
        return

    btns = Utilities.gen_ik_buttons()

    if duration >= 600:
        btns.append([InlineKeyboardButton("G·¥á…¥·¥á Ä·¥Ä·¥õ·¥á S·¥Ä·¥ç·¥ò ü·¥á V…™·¥Ö·¥á·¥è", "smpl")])

    await snt.edit_text(
        text=f"C ú·¥è·¥ès·¥á ·¥è…¥·¥á ·¥è“ì ·¥õ ú·¥á ·¥è·¥ò·¥õ…™·¥è…¥s.\n\nT·¥è·¥õ·¥Ä ü ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥: `{datetime.timedelta(seconds=duration)}` (`{duration}s`)",
        reply_markup=InlineKeyboardMarkup(btns),
    )
